// Generated by Copilot
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Clock, Sparkles, TrendingUp, Target, BookOpen, ArrowRight } from "lucide-react";

interface Topic {
  title: string;
  description: string;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  estimatedDuration?: number; // in minutes
  category?: string;
  priority?: 'low' | 'medium' | 'high';
  tags?: string[];
  learningObjectives?: string[];
}

interface TopicCardProps {
  topic: Topic;
  onSchedule: () => void;
  isLoading?: boolean;
  isHighlighted?: boolean;
  showDetails?: boolean;
}

export function TopicCard({ 
  topic, 
  onSchedule, 
  isLoading, 
  isHighlighted = false, 
  showDetails = true 
}: TopicCardProps) {
  // Helper functions for styling
  const getDifficultyColor = (difficulty?: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-emerald-100 text-emerald-700 border-emerald-200';
      case 'intermediate': return 'bg-amber-100 text-amber-700 border-amber-200';
      case 'advanced': return 'bg-rose-100 text-rose-700 border-rose-200';
      default: return 'bg-slate-100 text-slate-700 border-slate-200';
    }
  };

  const getPriorityColor = (priority?: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-700 border-red-200';
      case 'medium': return 'bg-orange-100 text-orange-700 border-orange-200';
      case 'low': return 'bg-blue-100 text-blue-700 border-blue-200';
      default: return 'bg-gray-100 text-gray-700 border-gray-200';
    }
  };

  const getDifficultyIcon = (difficulty?: string) => {
    switch (difficulty) {
      case 'beginner': return Target;
      case 'intermediate': return TrendingUp;
      case 'advanced': return BookOpen;
      default: return Target;
    }
  };

  const DifficultyIcon = getDifficultyIcon(topic.difficulty);

  return (
    <Card className={`
      group relative w-full max-w-3xl mx-auto overflow-hidden
      transition-all duration-300 ease-in-out transform hover:scale-[1.02] hover:shadow-2xl
      ${isHighlighted 
        ? 'border-2 border-learning shadow-xl ring-4 ring-learning/20' 
        : 'border border-gray-200 shadow-lg hover:border-learning/50'
      }
      bg-gradient-to-br from-white via-gray-50/30 to-learning-light/20
      backdrop-blur-sm
    `}>
      {/* Animated background pattern */}
      <div className="absolute inset-0 bg-gradient-to-r from-learning/5 via-transparent to-schedule/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
      
      {/* Priority indicator */}
      {topic.priority === 'high' && (
        <div className="absolute top-0 right-0 w-0 h-0 border-l-[0px] border-r-[60px] border-b-[60px] border-transparent border-r-red-500">
          <div className="absolute -top-[45px] -right-[45px] text-white text-xs font-bold transform rotate-45">
            HIGH
          </div>
        </div>
      )}

      <CardHeader className="relative pb-6 pt-8">
        {/* Category and difficulty badges */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <div className="p-2 rounded-full bg-learning/10 border border-learning/20">
              <Sparkles className="h-5 w-5 text-learning" />
            </div>
            <div className="flex flex-col">
              <span className="text-xs font-semibold text-learning uppercase tracking-wide">
                Daily Learning Spark
              </span>
              {topic.category && (
                <span className="text-xs text-muted-foreground">
                  {topic.category}
                </span>
              )}
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            {topic.difficulty && (
              <Badge className={`${getDifficultyColor(topic.difficulty)} border text-xs font-medium`}>
                <DifficultyIcon className="h-3 w-3 mr-1" />
                {topic.difficulty}
              </Badge>
            )}
            {topic.priority && topic.priority !== 'medium' && (
              <Badge className={`${getPriorityColor(topic.priority)} border text-xs font-medium`}>
                {topic.priority} priority
              </Badge>
            )}
          </div>
        </div>

        <CardTitle className="text-3xl font-bold text-gray-900 leading-tight group-hover:text-learning transition-colors duration-300">
          {topic.title}
        </CardTitle>
      </CardHeader>

      <CardContent className="relative space-y-6 pb-8">
        <CardDescription className="text-base text-gray-600 leading-relaxed">
          {topic.description}
        </CardDescription>

        {/* Learning objectives */}
        {showDetails && topic.learningObjectives && topic.learningObjectives.length > 0 && (
          <div className="space-y-2">
            <h4 className="text-sm font-semibold text-gray-800 flex items-center gap-2">
              <Target className="h-4 w-4" />
              What you'll learn:
            </h4>
            <ul className="space-y-1">
              {topic.learningObjectives.slice(0, 3).map((objective, index) => (
                <li key={index} className="text-sm text-gray-600 flex items-start gap-2">
                  <div className="w-1.5 h-1.5 rounded-full bg-learning mt-2 flex-shrink-0" />
                  {objective}
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Tags */}
        {showDetails && topic.tags && topic.tags.length > 0 && (
          <div className="flex flex-wrap gap-2">
            {topic.tags.slice(0, 4).map((tag, index) => (
              <Badge key={index} variant="outline" className="text-xs bg-white/50 hover:bg-learning/10 transition-colors">
                #{tag}
              </Badge>
            ))}
            {topic.tags.length > 4 && (
              <Badge variant="outline" className="text-xs bg-white/50">
                +{topic.tags.length - 4} more
              </Badge>
            )}
          </div>
        )}

        {/* Duration and action section */}
        <div className="flex items-center justify-between pt-4 border-t border-gray-100">
          <div className="flex items-center gap-4 text-sm text-gray-600">
            {topic.estimatedDuration && (
              <div className="flex items-center gap-1">
                <Clock className="h-4 w-4" />
                <span>{topic.estimatedDuration} min</span>
              </div>
            )}
            <div className="flex items-center gap-1">
              <BookOpen className="h-4 w-4" />
              <span>Interactive Learning</span>
            </div>
          </div>

          <Button 
            onClick={onSchedule}
            disabled={isLoading}
            className={`
              relative overflow-hidden group/btn
              bg-gradient-to-r from-schedule to-schedule/90 hover:from-schedule/90 hover:to-schedule
              text-white font-semibold px-6 py-3 rounded-xl
              shadow-lg hover:shadow-xl
              transform transition-all duration-200 hover:scale-105
              disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none
              ${isLoading ? 'animate-pulse' : ''}
            `}
          >
            {/* Button background animation */}
            <div className="absolute inset-0 bg-gradient-to-r from-learning to-schedule opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300" />
            
            <div className="relative flex items-center gap-2">
              <Clock className="h-4 w-4" />
              <span>{isLoading ? 'Scheduling...' : 'Schedule Learning'}</span>
              <ArrowRight className="h-4 w-4 transition-transform group-hover/btn:translate-x-1" />
            </div>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
