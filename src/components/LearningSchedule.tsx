// Generated by Copilot
import { useState, useMemo } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Calendar, Clock, BookOpen, Trophy, Star, Target, TrendingUp, CheckCircle2, AlertCircle, Search, Filter, Plus, BarChart3, Eye, EyeOff } from "lucide-react";
import { format, isAfter, isSameDay, differenceInDays, startOfDay, isThisWeek, isThisMonth, compareAsc } from "date-fns";

interface Topic {
  title: string;
  description: string;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  estimatedDuration?: number; // in minutes
  category?: string;
  priority?: 'low' | 'medium' | 'high';
}

interface ScheduledTopic {
    id: string;
  topic: Topic;
  date: Date;
    time: string;
  scheduledAt: Date;
  completed?: boolean;
  completedAt?: Date;
  notes?: string;
  rating?: number; // 1-5 stars
}

interface LearningScheduleProps {
    scheduledTopics: ScheduledTopic[];
  onMarkComplete?: (topicId: string) => void;
  onReschedule?: (topicId: string) => void;
  onAddNotes?: (topicId: string, notes: string) => void;
  onScheduleNew?: () => void;
  showStatistics?: boolean;
}

export function LearningSchedule({ 
  scheduledTopics, 
  onMarkComplete, 
  onReschedule, 
  onAddNotes,
  onScheduleNew,
  showStatistics = true
}: LearningScheduleProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [filterCategory, setFilterCategory] = useState("all");
  const [filterDifficulty, setFilterDifficulty] = useState("all");
  const [sortBy, setSortBy] = useState<"date" | "priority" | "difficulty">("date");
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [showCompleted, setShowCompleted] = useState(true);
  
  const now = new Date();
  const today = startOfDay(now);
  
  // Enhanced filtering with better logic
  const filteredAndSortedTopics = useMemo(() => {
    let filtered = scheduledTopics.filter(item => {
      // Search filter
      const matchesSearch = searchTerm === "" || 
        item.topic.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.topic.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (item.topic.category && item.topic.category.toLowerCase().includes(searchTerm.toLowerCase()));
      
      // Category filter
      const matchesCategory = filterCategory === "all" || item.topic.category === filterCategory;
      
      // Difficulty filter
      const matchesDifficulty = filterDifficulty === "all" || item.topic.difficulty === filterDifficulty;
      
      return matchesSearch && matchesCategory && matchesDifficulty;
    });

    // Sort filtered results
    filtered.sort((a, b) => {
      switch (sortBy) {
        case "priority":
          const priorityOrder = { high: 3, medium: 2, low: 1 };
          return (priorityOrder[b.topic.priority || 'low'] || 0) - (priorityOrder[a.topic.priority || 'low'] || 0);
        case "difficulty":
          const difficultyOrder = { advanced: 3, intermediate: 2, beginner: 1 };
          return (difficultyOrder[b.topic.difficulty || 'beginner'] || 0) - (difficultyOrder[a.topic.difficulty || 'beginner'] || 0);
        case "date":
        default:
          return compareAsc(a.date, b.date);
      }
    });

    return filtered;
  }, [scheduledTopics, searchTerm, filterCategory, filterDifficulty, sortBy]);

  const upcoming = filteredAndSortedTopics.filter(item => 
    !item.completed && (isAfter(item.date, today) || isSameDay(item.date, today))
  );
  const past = filteredAndSortedTopics.filter(item => 
    !item.completed && !isAfter(item.date, today) && !isSameDay(item.date, today)
  );
  const completed = showCompleted ? filteredAndSortedTopics.filter(item => item.completed) : [];

  // Get unique categories and difficulties for filters
  const categories = useMemo(() => {
    const cats = [...new Set(scheduledTopics.map(item => item.topic.category).filter(Boolean))];
    return cats;
  }, [scheduledTopics]);

  const difficulties = ['beginner', 'intermediate', 'advanced'] as const;
  
  // Calculate statistics
  const totalTopics = scheduledTopics.length;
  const completedCount = completed.length;
  const completionRate = totalTopics > 0 ? Math.round((completedCount / totalTopics) * 100) : 0;
  const overdueTasks = past.length;
  const todaysTasks = upcoming.filter(item => isSameDay(item.date, today)).length;
  const weeklyTasks = upcoming.filter(item => isThisWeek(item.date)).length;
  const monthlyTasks = upcoming.filter(item => isThisMonth(item.date)).length;
  
  // Calculate average completion time
  const avgCompletionTime = useMemo(() => {
    const completedWithTimes = completed.filter(item => item.topic.estimatedDuration);
    if (completedWithTimes.length === 0) return 0;
    const total = completedWithTimes.reduce((sum, item) => sum + (item.topic.estimatedDuration || 0), 0);
    return Math.round(total / completedWithTimes.length);
  }, [completed]);
  
  // Calculate streak
  const currentStreak = useMemo(() => {
    const sortedCompleted = completed
      .filter(item => item.completedAt)
      .sort((a, b) => new Date(b.completedAt!).getTime() - new Date(a.completedAt!).getTime());
    
    let streak = 0;
    let currentDate = new Date();
    currentDate.setHours(0, 0, 0, 0);
    
    for (const item of sortedCompleted) {
      const completedDate = new Date(item.completedAt!);
      completedDate.setHours(0, 0, 0, 0);
      
      const diffDays = Math.floor((currentDate.getTime() - completedDate.getTime()) / (1000 * 60 * 60 * 24));
      
      if (diffDays === streak || (streak === 0 && diffDays <= 1)) {
        streak++;
        currentDate = new Date(completedDate);
      } else {
        break;
      }
    }
    
    return streak;
  }, [completed]);
  
  // Get difficulty badge color
  const getDifficultyColor = (difficulty?: string) => {
    switch (difficulty) {
        case 'beginner': return 'bg-green-100 text-green-800 border-green-200';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
         case 'advanced': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };
  
  // Get priority color
  const getPriorityColor = (priority?: string) => {
    switch (priority) {
        case 'high': return 'bg-red-100 text-red-800 border-red-200';
      case 'medium': return 'bg-orange-100 text-orange-800 border-orange-200';
        case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };
  
  // Render star rating
  const renderStars = (rating?: number) => {
    if (!rating) return null;
    return (
          <div className="flex items-center gap-1">
        {[...Array(5)].map((_, i) => (
          <Star 
            key={i} 
               className={`h-3 w-3 ${i < rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`} 
          />
        ))}
      </div>
    );
  };

  if (scheduledTopics.length === 0) {
    return (
      <Card className="w-full max-w-4xl mx-auto">
        <CardHeader className="text-center">
          <CardTitle className="flex items-center justify-center gap-2 text-muted-foreground">
            <BookOpen className="h-6 w-6" />
            My Learning Schedule
          </CardTitle>
          <CardDescription>
            Start your learning journey by scheduling your first topic!
          </CardDescription>
        </CardHeader>
        <CardContent className="text-center py-8">
          <div className="max-w-md mx-auto space-y-4">
            <div className="text-muted-foreground">
              <Target className="h-16 w-16 mx-auto mb-4 opacity-50" />
              <p className="text-lg">No learning sessions scheduled yet</p>
              <p className="text-sm">Create your personalized learning schedule to track your progress and stay motivated.</p>
            </div>
            {onScheduleNew && (
              <Button onClick={onScheduleNew} className="mt-4">
                <Plus className="h-4 w-4 mr-2" />
                Schedule Your First Topic
              </Button>
            )}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-8 text-left">
              <div className="p-4 bg-muted/20 rounded-lg">
                <BookOpen className="h-8 w-8 text-primary mb-2" />
                <h3 className="font-semibold">Organize Learning</h3>
                <p className="text-sm text-muted-foreground">Schedule topics with priorities and difficulty levels</p>
              </div>
              <div className="p-4 bg-muted/20 rounded-lg">
                <TrendingUp className="h-8 w-8 text-success mb-2" />
                <h3 className="font-semibold">Track Progress</h3>
                <p className="text-sm text-muted-foreground">Monitor completion rates and learning streaks</p>
              </div>
              <div className="p-4 bg-muted/20 rounded-lg">
                <Trophy className="h-8 w-8 text-warning mb-2" />
                <h3 className="font-semibold">Stay Motivated</h3>
                <p className="text-sm text-muted-foreground">Rate sessions and add notes to track insights</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="w-full max-w-6xl mx-auto space-y-6">
      {/* Enhanced Statistics Dashboard */}
      {showStatistics && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
          <Card className="border-learning/30">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Total Progress</p>
                  <p className="text-2xl font-bold text-learning">{completionRate}%</p>
                </div>
                <TrendingUp className="h-8 w-8 text-learning" />
              </div>
              <Progress value={completionRate} className="mt-2" />
            </CardContent>
          </Card>
          
          <Card className="border-schedule/30">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Today's Tasks</p>
                  <p className="text-2xl font-bold text-schedule">{todaysTasks}</p>
                </div>
                <Calendar className="h-8 w-8 text-schedule" />
              </div>
            </CardContent>
          </Card>
          
          <Card className="border-success/30">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Completed</p>
                  <p className="text-2xl font-bold text-success">{completedCount}</p>
                </div>
                <Trophy className="h-8 w-8 text-success" />
              </div>
            </CardContent>
          </Card>
          
          <Card className="border-warning/30">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Current Streak</p>
                  <p className="text-2xl font-bold text-warning">{currentStreak}</p>
                </div>
                <Star className="h-8 w-8 text-warning" />
              </div>
            </CardContent>
          </Card>
          
          <Card className={`${overdueTasks > 0 ? 'border-destructive/30' : 'border-muted/30'}`}>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Overdue</p>
                  <p className={`text-2xl font-bold ${overdueTasks > 0 ? 'text-destructive' : 'text-muted-foreground'}`}>
                    {overdueTasks}
                  </p>
                </div>
                <AlertCircle className={`h-8 w-8 ${overdueTasks > 0 ? 'text-destructive' : 'text-muted-foreground'}`} />
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Filters and Search */}
      <Card>
        <CardHeader>
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
            <div>
              <CardTitle className="flex items-center gap-2 text-learning">
                <BookOpen className="h-6 w-6" />
                My Learning Schedule
              </CardTitle>
              <CardDescription>
                Track your learning journey and stay motivated! {totalTopics} topics total • {filteredAndSortedTopics.length} filtered
              </CardDescription>
            </div>
            <div className="flex items-center gap-2">
              {onScheduleNew && (
                <Button onClick={onScheduleNew} size="sm">
                  <Plus className="h-4 w-4 mr-2" />
                  Add Topic
                </Button>
              )}
            </div>
          </div>
          
          {/* Enhanced Filters */}
          <div className="flex flex-col sm:flex-row gap-4 mt-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search topics, descriptions, or categories..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            
            <div className="flex gap-2">
              <Select value={filterCategory} onValueChange={setFilterCategory}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  {categories.map(cat => (
                    <SelectItem key={cat} value={cat || ""}>{cat}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
              
              <Select value={filterDifficulty} onValueChange={setFilterDifficulty}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Difficulty" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Levels</SelectItem>
                  {difficulties.map(diff => (
                    <SelectItem key={diff} value={diff}>{diff}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
              
              <Select value={sortBy} onValueChange={(value: "date" | "priority" | "difficulty") => setSortBy(value)}>
                <SelectTrigger className="w-32">
                  <SelectValue placeholder="Sort by" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="date">Date</SelectItem>
                  <SelectItem value="priority">Priority</SelectItem>
                  <SelectItem value="difficulty">Difficulty</SelectItem>
                </SelectContent>
              </Select>
              
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowCompleted(!showCompleted)}
                className="px-3"
              >
                {showCompleted ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
              </Button>
            </div>
          </div>
        </CardHeader>
        
        <CardContent>
          {/* No Results State */}
          {filteredAndSortedTopics.length === 0 && (
            <div className="text-center py-8">
              <Search className="h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50" />
              <p className="text-lg font-medium">No topics found</p>
              <p className="text-sm text-muted-foreground mb-4">
                Try adjusting your search or filter criteria
              </p>
              <Button variant="outline" onClick={() => {
                setSearchTerm("");
                setFilterCategory("all");
                setFilterDifficulty("all");
              }}>
                Clear Filters
              </Button>
            </div>
          )}

          {/* Learning Schedule Tabs */}
          {filteredAndSortedTopics.length > 0 && (
            <Tabs defaultValue="upcoming" className="w-full">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="upcoming" className="flex items-center gap-2">
                  <Calendar className="h-4 w-4" />
                  Upcoming ({upcoming.length})
                </TabsTrigger>
                <TabsTrigger value="completed" className="flex items-center gap-2">
                  <Trophy className="h-4 w-4" />
                  Completed ({completed.length})
                </TabsTrigger>
                <TabsTrigger value="overdue" className="flex items-center gap-2">
                  <AlertCircle className="h-4 w-4" />
                  Overdue ({past.length})
                </TabsTrigger>
              </TabsList>

              <TabsContent value="upcoming" className="mt-6">
                {upcoming.length > 0 ? (
                  <div className="grid gap-4 md:grid-cols-2">
                    {upcoming.map((item) => {
                      const daysUntil = differenceInDays(item.date, today);
                      const isToday = isSameDay(item.date, today);
                      const isOverdue = daysUntil < 0;
                      
                      return (
                        <Card key={item.id} className={`border-schedule/30 transition-all hover:shadow-md ${
                          isToday ? 'bg-schedule/10 border-schedule' : 
                          isOverdue ? 'bg-destructive/5 border-destructive/30' : 
                          'bg-schedule-light/20'
                        }`}>
                          <CardContent className="p-4">
                            <div className="space-y-3">
                              <div className="flex items-start justify-between gap-2">
                                <div className="flex-1">
                                  <div className="flex items-center gap-2 mb-1">
                                    <h4 className="font-semibold text-foreground">
                                      {item.topic.title}
                                    </h4>
                                    {item.topic.priority && (
                                      <Badge className={`text-xs ${getPriorityColor(item.topic.priority)}`}>
                                        {item.topic.priority}
                                      </Badge>
                                    )}
                                  </div>
                                  <p className="text-sm text-muted-foreground mb-2">
                                    {item.topic.description}
                                  </p>
                                  
                                  {/* Metadata badges */}
                                  <div className="flex items-center gap-2 mb-3">
                                    {item.topic.difficulty && (
                                      <Badge className={`text-xs ${getDifficultyColor(item.topic.difficulty)}`}>
                                        {item.topic.difficulty}
                                      </Badge>
                                    )}
                                    {item.topic.estimatedDuration && (
                                      <Badge variant="outline" className="text-xs">
                                        {item.topic.estimatedDuration}min
                                      </Badge>
                                    )}
                                    {item.topic.category && (
                                      <Badge variant="outline" className="text-xs">
                                        {item.topic.category}
                                      </Badge>
                                    )}
                                  </div>
                                  
                                  <div className="flex items-center gap-4 text-sm">
                                    <span className={`flex items-center gap-1 ${
                                      isOverdue ? 'text-destructive' : 'text-schedule'
                                    }`}>
                                      <Calendar className="h-4 w-4" />
                                      {format(item.date, "MMM dd, yyyy")}
                                      {isToday && <span className="text-xs font-medium">(Today)</span>}
                                      {isOverdue && <span className="text-xs font-medium">({Math.abs(daysUntil)} days overdue)</span>}
                                    </span>
                                    <span className="flex items-center gap-1 text-schedule">
                                      <Clock className="h-4 w-4" />
                                      {item.time}
                                    </span>
                                  </div>
                                </div>
                                <div className="flex flex-col gap-2">
                                  <Badge variant="secondary" className={`text-xs ${
                                    isToday ? 'bg-schedule text-white' :
                                    isOverdue ? 'bg-destructive/20 text-destructive border-destructive/30' :
                                    'bg-schedule/20 text-schedule border-schedule/30'
                                  }`}>
                                    {isToday ? 'Today' : isOverdue ? 'Overdue' : 'Scheduled'}
                                  </Badge>
                                </div>
                              </div>
                              
                              {/* Action buttons */}
                              <div className="flex items-center gap-2 pt-2 border-t border-muted/20">
                                {onMarkComplete && (
                                  <Button 
                                    size="sm" 
                                    variant="outline"
                                    onClick={() => onMarkComplete(item.id)}
                                    className="flex items-center gap-1"
                                  >
                                    <CheckCircle2 className="h-3 w-3" />
                                    Complete
                                  </Button>
                                )}
                                {onReschedule && (
                                  <Button 
                                    size="sm" 
                                    variant="ghost"
                                    onClick={() => onReschedule(item.id)}
                                  >
                                    Reschedule
                                  </Button>
                                )}
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      );
                    })}
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    <Calendar className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <p>No upcoming sessions scheduled</p>
                  </div>
                )}
              </TabsContent>

              <TabsContent value="completed" className="mt-6">
                {completed.length > 0 ? (
                  <div className="grid gap-4 md:grid-cols-2">
                    {completed.map((item) => (
                      <Card key={item.id} className="border-success/30 bg-success/5 hover:bg-success/10 transition-colors">
                        <CardContent className="p-4">
                          <div className="space-y-3">
                            <div className="flex items-start justify-between gap-2">
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-1">
                                  <h4 className="font-semibold text-foreground">
                                    {item.topic.title}
                                  </h4>
                                  {item.rating && renderStars(item.rating)}
                                </div>
                                <p className="text-sm text-muted-foreground mb-2">
                                  {item.topic.description}
                                </p>
                                
                                {/* Metadata */}
                                <div className="flex items-center gap-2 mb-3">
                                  {item.topic.difficulty && (
                                    <Badge className={`text-xs ${getDifficultyColor(item.topic.difficulty)}`}>
                                      {item.topic.difficulty}
                                    </Badge>
                                  )}
                                  {item.topic.category && (
                                    <Badge variant="outline" className="text-xs">
                                      {item.topic.category}
                                    </Badge>
                                  )}
                                </div>
                                
                                <div className="flex items-center gap-4 text-sm">
                                  <span className="flex items-center gap-1 text-success">
                                    <Calendar className="h-4 w-4" />
                                    Completed {item.completedAt ? format(item.completedAt, "MMM dd") : format(item.date, "MMM dd")}
                                  </span>
                                  <span className="flex items-center gap-1 text-success">
                                    <CheckCircle2 className="h-4 w-4" />
                                    Done
                                  </span>
                                </div>
                                
                                {item.notes && (
                                  <div className="mt-2 p-2 bg-muted/20 rounded text-xs text-muted-foreground">
                                    "{item.notes}"
                                  </div>
                                )}
                              </div>
                              <Badge variant="secondary" className="bg-success/20 text-success border-success/30">
                                ✓ Completed
                              </Badge>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    <Trophy className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <p>No completed sessions yet</p>
                  </div>
                )}
              </TabsContent>

              <TabsContent value="overdue" className="mt-6">
                {past.length > 0 ? (
                  <div className="grid gap-4 md:grid-cols-2">
                    {past.map((item) => {
                      const daysOverdue = Math.abs(differenceInDays(item.date, today));
                      return (
                        <Card key={item.id} className="border-destructive/30 bg-destructive/5">
                          <CardContent className="p-4">
                            <div className="space-y-3">
                              <div className="flex items-start justify-between gap-2">
                                <div className="flex-1">
                                  <h4 className="font-semibold text-foreground mb-1">
                                    {item.topic.title}
                                  </h4>
                                  <p className="text-sm text-muted-foreground mb-3">
                                    {item.topic.description}
                                  </p>
                                  <div className="flex items-center gap-4 text-sm">
                                    <span className="flex items-center gap-1 text-destructive">
                                      <Calendar className="h-4 w-4" />
                                      {format(item.date, "MMM dd, yyyy")} ({daysOverdue} days overdue)
                                    </span>
                                    <span className="flex items-center gap-1 text-destructive">
                                      <Clock className="h-4 w-4" />
                                      {item.time}
                                    </span>
                                  </div>
                                </div>
                                <Badge variant="secondary" className="bg-destructive/20 text-destructive border-destructive/30">
                                  Overdue
                                </Badge>
                              </div>
                              
                              <div className="flex items-center gap-2 pt-2 border-t border-muted/20">
                                {onReschedule && (
                                  <Button 
                                    size="sm" 
                                    variant="outline"
                                    onClick={() => onReschedule(item.id)}
                                    className="flex items-center gap-1"
                                  >
                                    <Calendar className="h-3 w-3" />
                                    Reschedule
                                  </Button>
                                )}
                                {onMarkComplete && (
                                  <Button 
                                    size="sm" 
                                    variant="ghost"
                                    onClick={() => onMarkComplete(item.id)}
                                    className="flex items-center gap-1"
                                  >
                                    <CheckCircle2 className="h-3 w-3" />
                                    Mark Complete
                                  </Button>
                                )}
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      );
                    })}
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    <AlertCircle className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <p>No overdue tasks</p>
                  </div>
                )}
              </TabsContent>
            </Tabs>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
